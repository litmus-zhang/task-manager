// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (category_name, description, user_id) VALUES ($1, $2, $3) 
RETURNING category_id, user_id, category_name, description, color_hex, created_at
`

type CreateCategoryParams struct {
	CategoryName string         `json:"category_name"`
	Description  sql.NullString `json:"description"`
	UserID       int32          `json:"user_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.CategoryName, arg.Description, arg.UserID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.UserID,
		&i.CategoryName,
		&i.Description,
		&i.ColorHex,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUserCategory = `-- name: GetAllUserCategory :many
SELECT category_id, user_id, category_name, description, color_hex, created_at FROM categories 
WHERE user_id = $1 
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetAllUserCategoryParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUserCategory(ctx context.Context, arg GetAllUserCategoryParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserCategory, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.UserID,
			&i.CategoryName,
			&i.Description,
			&i.ColorHex,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
