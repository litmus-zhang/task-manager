// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks SET  is_completed = $2 WHERE task_id = $1
RETURNING task_id, category_id, task_name, description, timeline_type, priority, created_at, due_date, is_completed, updated_at
`

type CompleteTaskParams struct {
	TaskID      int32        `json:"task_id"`
	IsCompleted sql.NullBool `json:"is_completed"`
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask, arg.TaskID, arg.IsCompleted)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.CategoryID,
		&i.TaskName,
		&i.Description,
		&i.TimelineType,
		&i.Priority,
		&i.CreatedAt,
		&i.DueDate,
		&i.IsCompleted,
		&i.UpdatedAt,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (task_name, category_id, description , timeline_type) VALUES ($1, $2, $3, $4)
RETURNING task_id, category_id, task_name, description, timeline_type, priority, created_at, due_date, is_completed, updated_at
`

type CreateTaskParams struct {
	TaskName     string         `json:"task_name"`
	CategoryID   int32          `json:"category_id"`
	Description  sql.NullString `json:"description"`
	TimelineType string         `json:"timeline_type"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskName,
		arg.CategoryID,
		arg.Description,
		arg.TimelineType,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.CategoryID,
		&i.TaskName,
		&i.Description,
		&i.TimelineType,
		&i.Priority,
		&i.CreatedAt,
		&i.DueDate,
		&i.IsCompleted,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getAllTasksInCategory = `-- name: GetAllTasksInCategory :many
SELECT task_id, category_id, task_name, description, timeline_type, priority, created_at, due_date, is_completed, updated_at FROM tasks
WHERE category_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetAllTasksInCategoryParams struct {
	CategoryID int32 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetAllTasksInCategory(ctx context.Context, arg GetAllTasksInCategoryParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasksInCategory, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.CategoryID,
			&i.TaskName,
			&i.Description,
			&i.TimelineType,
			&i.Priority,
			&i.CreatedAt,
			&i.DueDate,
			&i.IsCompleted,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks SET  task_name = $2, category_id=$3, description=$4, timeline_type=$5, priority=$6 WHERE task_id = $1
RETURNING task_id, category_id, task_name, description, timeline_type, priority, created_at, due_date, is_completed, updated_at
`

type UpdateTaskParams struct {
	TaskID       int32          `json:"task_id"`
	TaskName     string         `json:"task_name"`
	CategoryID   int32          `json:"category_id"`
	Description  sql.NullString `json:"description"`
	TimelineType string         `json:"timeline_type"`
	Priority     string         `json:"priority"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.TaskID,
		arg.TaskName,
		arg.CategoryID,
		arg.Description,
		arg.TimelineType,
		arg.Priority,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.CategoryID,
		&i.TaskName,
		&i.Description,
		&i.TimelineType,
		&i.Priority,
		&i.CreatedAt,
		&i.DueDate,
		&i.IsCompleted,
		&i.UpdatedAt,
	)
	return i, err
}
